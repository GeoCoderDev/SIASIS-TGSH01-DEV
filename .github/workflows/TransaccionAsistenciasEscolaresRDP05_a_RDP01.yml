name: Actualizar Lista de Asistencias Escolares de Hoy

on:
  # Ejecuci√≥n manual desde GitHub
  workflow_dispatch:
    inputs:
      nivel:
        description: "Nivel educativo"
        required: true
        type: choice
        options:
          - "P"
          - "S"
        default: "P"
      grado:
        description: "Grado"
        required: true
        type: choice
        options:
          - "1"
          - "2"
          - "3"
          - "4"
          - "5"
          - "6"
        default: "1"

  # Ejecuci√≥n desde solicitud HTTP externa
  repository_dispatch:
    types: [actualizar-listas-asistencia-hoy]

jobs:
  actualizar-lista-asistencias:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Instalar dependencias
        run: npm install

      - name: Validar par√°metros de entrada
        id: validar-parametros
        run: |
          # Determinar origen de los par√°metros
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Ejecuti√≥n manual detectada"
            NIVEL="${{ github.event.inputs.nivel }}"
            GRADO="${{ github.event.inputs.grado }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Ejecuci√≥n por HTTP detectada"
            NIVEL="${{ github.event.client_payload.nivel }}"
            GRADO="${{ github.event.client_payload.grado }}"
          else
            echo "‚ùå Tipo de evento no soportado: ${{ github.event_name }}"
            exit 1
          fi

          # Validar nivel
          if [[ ! "$NIVEL" =~ ^[PS]$ ]]; then
            echo "‚ùå Error: Nivel debe ser 'P' (Primaria) o 'S' (Secundaria)"
            echo "Nivel recibido: '$NIVEL'"
            exit 1
          fi

          # Validar grado
          if [[ ! "$GRADO" =~ ^[1-6]$ ]]; then
            echo "‚ùå Error: Grado debe estar entre 1 y 6"
            echo "Grado recibido: '$GRADO'"
            exit 1
          fi

          # Validar combinaci√≥n nivel-grado
          if [ "$NIVEL" = "P" ] && [[ ! "$GRADO" =~ ^[1-6]$ ]]; then
            echo "‚ùå Error: Para primaria, el grado debe estar entre 1 y 6"
            exit 1
          fi

          if [ "$NIVEL" = "S" ] && [[ ! "$GRADO" =~ ^[1-5]$ ]]; then
            echo "‚ùå Error: Para secundaria, el grado debe estar entre 1 y 5"
            exit 1
          fi

          echo "‚úÖ Par√°metros validados: Nivel=$NIVEL, Grado=$GRADO"
          echo "nivel=$NIVEL" >> $GITHUB_OUTPUT
          echo "grado=$GRADO" >> $GITHUB_OUTPUT

      - name: Mostrar informaci√≥n de ejecuci√≥n
        run: |
          echo "üöÄ === INFORMACI√ìN DE EJECUCI√ìN ==="
          echo "Evento: ${{ github.event_name }}"
          echo "Nivel: ${{ steps.validar-parametros.outputs.nivel }}"
          echo "Grado: ${{ steps.validar-parametros.outputs.grado }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repositorio: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"
          echo "Fecha: $(date)"
          echo "================================"

      - name: Ejecutar script de actualizaci√≥n
        run: |
          echo "üìã Ejecutando script de actualizaci√≥n de listas de asistencias..."
          npx ts-node ./src/jobs/transactions/TransaccionAsistenciasEscolaresRDP05_a_RDP01.ts ${{ steps.validar-parametros.outputs.nivel }} ${{ steps.validar-parametros.outputs.grado }}
        env:
          # Google Drive (RDP01)
          RDP01_GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.RDP01_GOOGLE_SERVICE_ACCOUNT_EMAIL }}
          RDP01_GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.RDP01_GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY }}
          RDP01_GOOGLE_SERVICE_ACCOUNT_PROJECT_ID: ${{ secrets.RDP01_GOOGLE_SERVICE_ACCOUNT_PROJECT_ID }}
          RDP01_GOOGLE_DRIVE_ROOT_SHARED_FOLDER_ID: ${{ secrets.RDP01_GOOGLE_DRIVE_ROOT_SHARED_FOLDER_ID }}
          # PostgreSQL (RDP02)
          RDP02_INS1_DATABASE_URL: ${{ secrets.RDP02_INS1_DATABASE_URL }}
          RDP02_INS2_DATABASE_URL: ${{ secrets.RDP02_INS2_DATABASE_URL }}
          RDP02_INS3_DATABASE_URL: ${{ secrets.RDP02_INS3_DATABASE_URL }}
          # MongoDB (RDP03)
          RDP03_INS1_DATABASE_URL: ${{ secrets.RDP03_INS1_DATABASE_URL }}
          RDP03_INS2_DATABASE_URL: ${{ secrets.RDP03_INS2_DATABASE_URL }}
          RDP03_INS3_DATABASE_URL: ${{ secrets.RDP03_INS3_DATABASE_URL }}
          RDP03_INS4_DATABASE_URL: ${{ secrets.RDP03_INS4_DATABASE_URL }}
          RDP03_INS5_DATABASE_URL: ${{ secrets.RDP03_INS5_DATABASE_URL }}
         
          # Redis (RDP05)
          RDP05_INS1_REDIS_BD_BASE_URL_API: ${{ secrets.RDP05_INS1_REDIS_BD_BASE_URL_API }}
          RDP05_INS1_REDIS_BD_TOKEN_FOR_API: ${{ secrets.RDP05_INS1_REDIS_BD_TOKEN_FOR_API }}
          RDP05_INS2_REDIS_BD_BASE_URL_API: ${{ secrets.RDP05_INS2_REDIS_BD_BASE_URL_API }}
          RDP05_INS2_REDIS_BD_TOKEN_FOR_API: ${{ secrets.RDP05_INS2_REDIS_BD_TOKEN_FOR_API }}
          RDP05_INS3_REDIS_BD_BASE_URL_API: ${{ secrets.RDP05_INS3_REDIS_BD_BASE_URL_API }}
          RDP05_INS3_REDIS_BD_TOKEN_FOR_API: ${{ secrets.RDP05_INS3_REDIS_BD_TOKEN_FOR_API }}
          
          # API03
          API03_BASE_URL: ${{ secrets.API03_BASE_URL }}

          # Entorno
          ENTORNO: ${{ secrets.ENTORNO }}

      - name: Reporte de resultado
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ === EJECUCI√ìN EXITOSA ==="
            echo "Lista de asistencias actualizada correctamente"
            echo "Nivel: ${{ steps.validar-parametros.outputs.nivel }}"
            echo "Grado: ${{ steps.validar-parametros.outputs.grado }}"
          else
            echo "‚ùå === EJECUCI√ìN FALLIDA ==="
            echo "Error al actualizar lista de asistencias"
            echo "Revisar logs anteriores para m√°s detalles"
            exit 1
          fi
